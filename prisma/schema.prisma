generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model authorizer_authenticators {
  key            String?
  id             String  @id @db.Char(36)
  user_id        String? @db.Char(36)
  method         String?
  secret         String?
  recovery_codes String?
  verified_at    BigInt?
  created_at     BigInt?
  updated_at     BigInt?
}

model authorizer_email_templates {
  key        String?
  id         String  @id @db.Char(36)
  event_name String? @unique
  subject    String?
  template   String?
  design     String?
  created_at BigInt?
  updated_at BigInt?
}

model authorizer_envs {
  key            String?
  id             String  @id @db.Char(36)
  env_data       String?
  hash           String?
  encryption_key String?
  updated_at     BigInt?
  created_at     BigInt?
}

model authorizer_otps {
  key          String?
  id           String  @id @db.Char(36)
  email        String? @unique
  phone_number String? @unique(map: "idx_authorizer_otps_phone_number")
  otp          String?
  expires_at   BigInt?
  created_at   BigInt?
  updated_at   BigInt?
}

model authorizer_sessions {
  key        String?
  id         String  @id @db.Char(36)
  user_id    String? @db.Char(36)
  user_agent String?
  ip         String?
  created_at BigInt?
  updated_at BigInt?
}

model authorizer_users {
  key                          String?
  id                           String         @id @db.Char(36)
  email                        String?        @unique
  email_verified_at            BigInt?
  password                     String?
  signup_methods               String?
  given_name                   String?
  family_name                  String?
  middle_name                  String?
  nickname                     String?
  gender                       String?
  birthdate                    String?
  phone_number                 String?
  phone_number_verified_at     BigInt?
  picture                      String?
  roles                        String?
  revoked_timestamp            BigInt?
  is_multi_factor_auth_enabled Boolean?
  updated_at                   BigInt?
  created_at                   BigInt?
  app_data                     String?
  group_users                  group_users[]
  friends                      user_friends[]

  @@index([phone_number], map: "idx_authorizer_users_phone_number")
}

model authorizer_verification_requests {
  key          String?
  id           String  @id @db.Char(36)
  token        String?
  identifier   String? @db.VarChar(64)
  expires_at   BigInt?
  email        String? @db.VarChar(256)
  nonce        String?
  redirect_uri String?
  created_at   BigInt?
  updated_at   BigInt?

  @@unique([identifier, email], map: "idx_email_identifier")
}

model authorizer_webhook_logs {
  key         String?
  id          String  @id @db.Char(36)
  http_status BigInt?
  response    String?
  request     String?
  webhook_id  String? @db.Char(36)
  created_at  BigInt?
  updated_at  BigInt?
}

model authorizer_webhooks {
  key               String?
  id                String   @id @db.Char(36)
  event_name        String?  @unique
  event_description String?
  end_point         String?
  headers           String?
  enabled           Boolean?
  created_at        BigInt?
  updated_at        BigInt?
}

model user_friends {
  id                 String           @id @default(cuid())
  user               authorizer_users @relation(fields: [authorizer_usersId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorizer_usersId String           @db.Char(36)
}

model expense_splits {
  id                  String      @id @default(cuid())
  expense             expenses    @relation(fields: [expensesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user                group_users @relation(fields: [group_usersId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  money_total         Float
  money_share_percent Float
  money_share         Float
  expensesId          String
  group_usersId       String
}

model group_users {
  id                 String           @id @default(cuid())
  user               authorizer_users @relation(fields: [authorizer_usersId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role               String
  authorizer_usersId String           @db.Char(36)
  groups             groups?          @relation(fields: [groupsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupsId           String?
  expense_splits     expense_splits[]
}

model expenses {
  id             String           @id @default(cuid())
  name           String
  description    String?
  expense_total  Float            @default(0)
  expense_splits expense_splits[]
  group          groups           @relation(fields: [groupsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupsId       String
}

model groups {
  id          String        @id @default(cuid())
  name        String
  invite_link String?       @default(cuid())
  users       group_users[]
  expenses    expenses[]
}
